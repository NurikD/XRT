from aiogram import F, Router
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hide_link
from bot.database.methods.get import get_argus_login
from bot.database.methods.update import latest_activity, update_argus_login

from bot.handlers.user.utils import deadline_message
from bot.handlers.user.register.fsm_states import Form

from bot.keyboards.user.reply import *
from bot.keyboards.user.inline import *

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_path –∏ counted_apps
global file_path, counted_apps

# –í—ã–≤–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #

@router.message(F.text == 'üíª–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def settings(message: Message):
    await message.answer(
        text=f"{hide_link('https://telegra.ph/file/2e8bf0a6bd744d44231bc.png')}"
             "–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ, –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –Ω–∞ –Ω–æ–≤—ã–π. "
             "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∏–∂–µ, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å üëá",
        reply_markup=settings_menu())

    await latest_activity(message.from_user.id)


@router.message(F.text == 'üèò–£—á–∞—Å—Ç–∫–∏')
async def plots(message: Message):
    await message.answer("<i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–µ–∂–∏–º–µ –∞–ø—Ä–æ–±–∞—Ü–∏–∏...</i>‚è∞")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –ê—Ä–≥—É—Å–∞ –≤ –ë–î
@router.message(F.text == '–õ–æ–≥–∏–Ω –ê—Ä–≥—É—Å')
async def argus_login(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –ê–†–ì–£–°:")


@router.message(F.text.lower())
async def argus_login_command(message: Message, state: FSMContext):
    try:
        login = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ–≥–∏–Ω –ê—Ä–≥—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        existing_login = await get_argus_login(message.from_user.id)
        if existing_login:
            await message.answer(f"–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–≥–∏–Ω –ê—Ä–≥—É—Å: {existing_login}")
        else:
            await update_argus_login(message.from_user.id, login)
            await message.answer(f"–õ–æ–≥–∏–Ω –ê—Ä–≥—É—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {login}")
        await state.finish()

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data == 'change_executor_to_dispatcher')
async def change_to_dispatcher(call: CallbackQuery, state: FSMContext):
    await state.update_data(change_role='to_dispatcher')
    if await deadline_message(call) is False:
        await call.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª.–ø–æ—á—Ç—ã:"
        )

        await state.set_state(Form.taking_email)


# –í—ã–≤–æ–¥ –∫–æ–ª-–≤–∞ –∑–∞—è–≤–æ–∫ –ø–æ –≥–æ—Ä–æ–¥–∞–º #

@router.callback_query(F.data == 'data_by_city')
async def requests_by_city(call: CallbackQuery):
    if await deadline_message(call) is False:
        global file_path, counted_apps  # –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

        await call.message.delete()
        await call.message.answer(
            text=counted_apps,
            reply_markup=btn_back_to_excel()
        )

    await call.answer()


@router.callback_query(F.data == 'back_to_excel')
async def back_to_file(call: CallbackQuery):
    if await deadline_message(call) is False:
        global file_path, counted_apps  # –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        generated_file = FSInputFile(file_path)

        await call.message.delete()
        await call.message.answer_document(
            generated_file,
            reply_markup=btn_app_by_city()
        )

    await call.answer()
