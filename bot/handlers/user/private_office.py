from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hide_link
import re
from bot.database.methods.get import get_user_mail, get_argus_login
from bot.database.methods.update import latest_activity, update_argus_login

from bot.handlers.user.utils import deadline_message
from bot.handlers.user.register.fsm_states import Form

from bot.keyboards.user.reply import *
from bot.keyboards.user.inline import *

router = Router()


# –í—ã–≤–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #


@router.message(F.text == 'üíª–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def settings(message: Message):
    # is_dispatcher = await dispatcher_exists(message.from_user.id)
    await message.answer(
        text=f"{hide_link('https://telegra.ph/file/2e8bf0a6bd744d44231bc.png')}"
             "–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –ê—Ä–≥—É—Å –∏ —É—á–∞—Å—Ç–æ–∫, "
             "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∏–∂–µ, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å üëá",
        # reply_markup=settings_menu(is_dispatcher))
        reply_markup=settings_menu())  # –¥–æ–±–∞–≤–ª–µ–Ω–æ

    await latest_activity(message.from_user.id)


@router.message(F.text == 'üèò–£—á–∞—Å—Ç–∫–∏')
async def plots(message: Message):
    await message.answer("<i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–µ–∂–∏–º–µ –∞–ø—Ä–æ–±–∞—Ü–∏–∏...</i>‚è∞")


@router.message(F.text == '–õ–æ–≥–∏–Ω –ê—Ä–≥—É—Å')
async def argus_login_command(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ê–†–ì–£–°:\n\n"
                         "–ü—Ä–∏–º–µ—Ä - –õ–æ–≥–∏–Ω: FM_ARGUS")


@router.message(lambda message: message.text and re.match(r"^–õ–æ–≥–∏–Ω:\s+", message.text))
async def process_argus_login(message: types.Message):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞
        match = re.match(r"^–õ–æ–≥–∏–Ω:\s+(\S+)", message.text)
        if match:
            login = match.group(1).strip()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ–≥–∏–Ω –ê—Ä–≥—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            existing_login = await get_argus_login(message.from_user.id)
            if existing_login:
                await message.answer(f"–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–≥–∏–Ω –ê—Ä–≥—É—Å: {existing_login}")
            else:
                await update_argus_login(message.from_user.id, login)
                await message.answer(f"–õ–æ–≥–∏–Ω –ê—Ä–≥—É—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {login}")

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –í—ã–≤–æ–¥ –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –µ–µ –∏–∑–º–µ–Ω–∏—Ç—å #

@router.message(F.text == 'üì¨–ü–æ—á—Ç–∞')
async def user_email(message: Message):
    # is_dispatcher = await dispatcher_exists(message.from_user.id)
    # if is_dispatcher is True:
    user_mail = await get_user_mail(message.from_user.id)
    await message.answer(text=f"–í–∞—à –∞–¥—Ä–µ—Å —Å–µ–π—á–∞—Å: {user_mail}\n\n"
                              "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –Ω–∞ –Ω–æ–≤—ã–π, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                         reply_markup=btn_change_email())


@router.callback_query(F.data == 'change_email')
async def change_email(call: CallbackQuery, state: FSMContext):
    user_mail = await get_user_mail(call.from_user.id)
    await state.update_data(change_email=True, old_email=user_mail)
    if await deadline_message(call) is False:
        await call.message.edit_text(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —ç–ª.–ø–æ—á—Ç—ã:'
        )

        await state.set_state(Form.taking_email)



@router.callback_query(F.data == 'change_dispatcher_to_executor')
async def change_to_executor(call: CallbackQuery, state: FSMContext):
    await state.update_data(change_role='to_executor')
    if await deadline_message(call) is False:
        await call.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ê–†–ì–£–°:",
        )

        await state.set_state(Form.taking_argus)


@router.callback_query(F.data == 'change_executor_to_dispatcher')
async def change_to_dispatcher(call: CallbackQuery, state: FSMContext):
    await state.update_data(change_role='to_dispatcher')
    if await deadline_message(call) is False:
        await call.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª.–ø–æ—á—Ç—ã:",
        )

        await state.set_state(Form.taking_email)


@router.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥')
async def back_to_main(message: Message):
    await message.answer(
        text="–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
        reply_markup=main_menu()
    )
