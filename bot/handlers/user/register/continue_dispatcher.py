from aiogram import F, html, Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from .main_register import save_user_data
from .fsm_states import Form

from bot.app.sender import register_mail


router = Router()


# –≠—Ç–∞–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ #

@router.message(Form.taking_email, F.text.contains('gmail.com'))
async def email_taken(message: Message, state: FSMContext) -> None:
    user_data = await state.get_data()
    data = {
        'email': None,
    }
    entities = message.entities or []

    for item in entities:
        if item.type in data.keys():
            data[item.type] = item.extract_from(message.text)

    if data['email'] is None:
        await email_incorrectly(message)

    if data['email'] == user_data.get('old_email'):
        await same_mail(message)
        return

    send_code = register_mail(data['email'])
    if send_code is False:
        await email_incorrectly(message)

    else:
        await state.update_data(email=data['email'], email_code=str(send_code))
        await message.answer(
            f"üïä–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –Ω–∞ {html.quote(data['email'])}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:"
        )

        await state.set_state(Form.checking_email_code)

# –≠—Ç–∞–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –ø–æ—á—Ç—ã #


@router.message(Form.taking_email)
async def email_incorrectly(message: Message) -> None:
    await message.answer(
        "<b>‚ùå–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail –∞–¥—Ä–µ—Å</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑!",
    )


async def same_mail(message: Message) -> None:
    await message.answer(
        "<b>‚ùå–ù–æ–≤—ã–π e-mail –∞–¥—Ä–µ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è —Å –ø—Ä–æ—à–ª—ã–º!</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑!",
    )


# –≠—Ç–∞–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #

@router.message(Form.checking_email_code)
async def email_checking_code(message: Message, state: FSMContext) -> None:
    user_data = await state.get_data()
    if user_data['email_code'] == message.text:
        await save_user_data(message, user_data)
        await state.clear()

    else:
        await email_code_incorrectly(message)


@router.message(Form.checking_email_code)
async def email_code_incorrectly(message: Message) -> None:
    await message.answer(
        "<b>‚ùå–ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑!"
    )
